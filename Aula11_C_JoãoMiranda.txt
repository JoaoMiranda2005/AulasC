Exercício 1
R: x=3, y=4, *p = 4

Exercicio 2

a)
void main() {
    int x, *p;
    x = 100;
    p = &x;
    printf("Valor de p: %d.\n", *p);
}
R: p deve armazenar memória, não um valor direto


b)
void troca(int* i, int* j) {
    int temp;
    temp = *i;
    *i = *j;
    *j = temp;
}
não foi alocada memória para temp 

c)
char *a, *b;
a = "abacate";
b = "uva";
if (a < b)
    printf("%s vem antes de %s no dicionário", a, b);
else
    printf("%s vem depois de %s no dicionário", a, b);

não tem erros


Exercicio 3
Resolvido no pdf 

Exercício 4
#include <stdio.h>

int main() {
    int y, *p, x;

    // Inicializa a variável y com 0.
    y = 0;

    // O ponteiro p recebe o endereço de y.
    p = &y;

    // A variável x recebe o valor apontado por p, que é o valor de y (0).
    x = *p;

    // A variável x é atribuída o valor 4.
    x = 4;

    // Incrementa o valor apontado por p (o valor de y) em 1. Agora y é 1.
    (*p)++;

    // Decrementa o valor de x em 1. Agora x é 3.
    x--;

    // Adiciona o valor de x ao valor apontado por p (o valor de y). Agora y é 4.
    (*p) += x;

    // Imprime o valor final de y.
    printf("y=%d\n", y);

    return 0;
}

Exercicio 5

#include <stdio.h>

int strEnd(const char *s, const char *t) {
    int len_s = 0;
    int len_t = 0;

    while (s[len_s] != '\0') {
        len_s++;
    }

    while (t[len_t] != '\0') {
        len_t++;
    }

    if (len_t > len_s) {
        return 0; 
    }

    for (int i = 0; i < len_t; i++) {
        if (s[len_s - len_t + i] != t[i]) {
            return 0; 
        }
    }

    return 1; 
}

int main() {
    const char *s = "abcdefgh";
    const char *t1 = "fgh";
    const char *t2 = "xyz";

    printf("Resultado para t1: %d\n", strEnd(s, t1));
    printf("Resultado para t2: %d\n", strEnd(s, t2));

    return 0;
}

Exercicio 6

#include<stdio.h>

int main() {
    int x, *p, **q;
    p = &x;
    q = &p;
    x = 10;
    printf("\n%d\n", **q);
    return 0;
}


Exercicio 7

#include <stdio.h>
#include <stdlib.h>

#define LINHAS 100
#define COLUNAS 100

int main() {
    
    int matriz[LINHAS][COLUNAS];


    int *ptr = &matriz[0][0];
    for (int i = 0; i < LINHAS * COLUNAS; i++) {
        *(ptr + i) = 0;
    }


    int numero = 1;
    for (int i = 0; i < LINHAS; i++) {
        for (int j = 0; j < COLUNAS; j++) {
            *(ptr + i * COLUNAS + j) = numero++;
        }
    }

    for (int i = 0; i < LINHAS; i++) {
        for (int j = 0; j < COLUNAS; j++) {
            printf("%6d ", matriz[i][j]);
        }
        printf("\n");
    }

    return 0;
}

Exercicio 8

#include <stdio.h>
#include <stdlib.h>

int main(void) {
    int x, *p;
    x = 10;

    p = (int*)malloc(sizeof(int));


    if (p == NULL) {
        printf("Erro na alocação de memória.\n");
        return 1;
    }


    *p = x;


    free(p);

    return 0;
}

Exercicio 9

#include <stdio.h>

void main(void) {
    int x, *p;
    x = 10;

    p = &x;

    printf("%d", *p);
}

Exercicio 10

#include <stdio.h>

int somaRecursiva(int n) {
    if (n == 0) {
        return 0;
    } else {
        return n + somaRecursiva(n - 1);
    }
}

int main() {
    int N;

    printf("Digite um valor para N: ");
    scanf("%d", &N);

    int resultado = somaRecursiva(N);

    printf("A soma dos números de 1 até %d é: %d\n", N, resultado);

    return 0;
}


Exercicio 11
#include <stdio.h>

int mdcRecursivo(int a, int b) {
    if (b == 0) {
        return a;
    } else {
        return mdcRecursivo(b, a % b);
    }
}

int main() {
    int num1, num2;
    printf("Digite o primeiro número: ");
    scanf("%d", &num1);

    printf("Digite o segundo número: ");
    scanf("%d", &num2);

    int resultado = mdcRecursivo(num1, num2);

    printf("O Máximo Divisor Comum (MDC) de %d e %d é: %d\n", num1, num2, resultado);

    return 0;
}

Exercicio 12

#include <stdio.h>

double power(double a, int b) {

    if (b == 0) {
        return 1.0;
    }

    else if (b == 1) {
        return a;
    }

    else if (b > 0) {
        return a * power(a, b - 1);
    }

    else {
        return 1.0 / power(a, -b);
    }
}

int main() {
    double base;
    int expoente;


    printf("Digite a base (a): ");
    scanf("%lf", &base);

    printf("Digite o expoente (b): ");
    scanf("%d", &expoente);


    double resultado = power(base, expoente);

    printf("%lf elevado a %d é: %lf\n", base, expoente, resultado);

    return 0;
}

Exercicio 13

#include <stdio.h>

void torreDeHanoi(int n, char origem, char destino, char trabalho) {
   
    if (n == 1) {
        printf("Mova o disco 1 da torre %c para a torre %c\n", origem, destino);
        return;
    }


    torreDeHanoi(n - 1, origem, trabalho, destino);


    printf("Mova o disco %d da torre %c para a torre %c\n", n, origem, destino);

    torreDeHanoi(n - 1, trabalho, destino, origem);
}

int main() {
    int numDiscos;

    printf("Digite o número de discos: ");
    scanf("%d", &numDiscos);
    torreDeHanoi(numDiscos, 'A', 'C', 'B');

    return 0;
}

Exercicio 14

#include <stdio.h>

int main() {
    FILE *arquivo;
    char caractere;

    arquivo = fopen("arq.txt", "w");

    if (arquivo == NULL) {
        printf("Erro ao abrir o arquivo.\n");
        return 1; 
    }

    printf("Digite caracteres para armazenar no arquivo (digite '0' para encerrar):\n");

    while (1) {
        scanf(" %c", &caractere); 

        if (caractere == '0') {
            break;
        }

        fputc(caractere, arquivo); 
    }


    fclose(arquivo);

    arquivo = fopen("arq.txt", "r");

    if (arquivo == NULL) {
        printf("Erro ao abrir o arquivo para leitura.\n");
        return 1; 
    }

    printf("\nConteúdo do arquivo:\n");

    while ((caractere = fgetc(arquivo)) != EOF) {
        printf("%c", caractere);
    }

    fclose(arquivo);

    return 0;
}

Exercicio 15

#include <stdio.h>

int main() {
    FILE *arquivo;
    char linha[1000];
    int numeroLinha = 1;


    arquivo = fopen("arquivo.txt", "r");

    if (arquivo == NULL) {
        printf("Erro ao abrir o arquivo.\n");
        return 1; // Saída com erro
    }

    while (fgets(linha, sizeof(linha), arquivo) != NULL) {
        printf("%d:%s", numeroLinha, linha);
        numeroLinha++;
    }

    fclose(arquivo);

    return 0;
}

Exercicio 16

#include <stdio.h>

int main() {
    FILE *arquivo;
    int numero;
    arquivo = fopen("dados.int", "wb");

    if (arquivo == NULL) {
        printf("Erro ao abrir o arquivo para escrita.\n");
        return 1; 
    }

    printf("Digite inteiros (digite 0 para encerrar):\n");

    while (1) {
        scanf("%d", &numero);

        if (numero == 0) {
            break;
        }
        fwrite(&numero, sizeof(int), 1, arquivo);
    }

      fclose(arquivo);

    return 0;
}



